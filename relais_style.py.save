from flask import Flask, render_template_string, redirect, url_for
import RPi.GPIO as GPIO
import time

# Configuration des broches GPIO pour 4 relais
# Assurez-vous que ces numéros de broches correspondent à votre câblage
RELAY_PINS = {
    "Ventilation": 27,
    "Chauffage": 22,
    "Système Audio": 23
}

# Initialisation du GPIO
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
for pin in RELAY_PINS.values():
    GPIO.setup(pin, GPIO.OUT)
    # Mettre tous les relais sur OFF au démarrage (HIGH = OFF pour la plupart des modules)
    GPIO.output(pin, GPIO.HIGH)

app = Flask(__name__)

# Le template HTML avec du style CSS intégré et des icônes
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contrôle des Relais IoT</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 500px;
            padding: 40px;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .header {
            margin-bottom: 35px;
        }

        .header h1 {
            color: #2c3e50;
            font-size: 2.2em;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            color: #7f8c8d;
            font-size: 1.1em;
            margin-bottom: 20px;
        }

        .status-bar {
            display: flex;
            justify-content: center;
            align-items: center;
            background: #ecf0f1;
            padding: 12px;
            border-radius: 25px;
            margin-bottom: 30px;
        }

        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #27ae60;
            margin-right: 10px;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .relay-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
        }

        .relay-card {
            background: #ffffff;
            border-radius: 16px;
            padding: 25px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            border: 1px solid #e8f4f8;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .relay-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        }

        .relay-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #3498db, #2ecc71);
        }

        .relay-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .relay-icon {
            font-size: 2em;
            margin-right: 15px;
            color: #3498db;
            width: 50px;
            text-align: center;
        }

        .relay-info h3 {
            color: #2c3e50;
            font-size: 1.3em;
            margin-bottom: 5px;
            font-weight: 600;
        }

        .relay-info .pin-info {
            color: #7f8c8d;
            font-size: 0.9em;
            font-family: 'Courier New', monospace;
        }

        .button-group {
            display: flex;
            gap: 12px;
            justify-content: center;
        }

        .control-button {
            flex: 1;
            padding: 15px 25px;
            border: none;
            border-radius: 12px;
            font-size: 1em;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            position: relative;
            overflow: hidden;
        }

        .control-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .control-button:hover::before {
            left: 100%;
        }

        .on-button {
            background: linear-gradient(135deg, #27ae60, #2ecc71);
            color: white;
            box-shadow: 0 4px 15px rgba(46, 204, 113, 0.3);
        }

        .on-button:hover {
            background: linear-gradient(135deg, #229954, #27ae60);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(46, 204, 113, 0.4);
        }

        .off-button {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
        }

        .off-button:hover {
            background: linear-gradient(135deg, #c0392b, #a93226);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
        }

        .control-button:active {
            transform: translateY(0);
        }

        .control-button i {
            margin-right: 8px;
        }

        .footer {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #ecf0f1;
            color: #7f8c8d;
            font-size: 0.9em;
        }

        /* Responsive design */
        @media (max-width: 480px) {
            .container {
                padding: 25px;
            }
            
            .header h1 {
                font-size: 1.8em;
            }
            
            .relay-card {
                padding: 20px;
            }
            
            .button-group {
                flex-direction: column;
            }
            
            .control-button {
                padding: 12px 20px;
            }
        }

        /* Animation d'entrée */
        .relay-card {
            animation: slideInUp 0.5s ease forwards;
            opacity: 0;
            transform: translateY(20px);
        }

        @keyframes slideInUp {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-microchip"></i> Contrôle IoT</h1>
            <p>Panneau de contrôle des relais intelligents</p>
            <div class="status-bar">
                <div class="status-indicator"></div>
                <span>Système connecté</span>
            </div>
        </div>
        
        <div class="relay-grid">
            {% for name, pin in relays.items() %}
            <div class="relay-card" style="animation-delay: {{ loop.index0 * 0.1 }}s;">
                <div class="relay-header">
                    <div class="relay-icon">
                        {% if "Éclairage" in name %}
                            <i class="fas fa-lightbulb"></i>
                        {% elif "Ventilation" in name %}
                            <i class="fas fa-fan"></i>
                        {% elif "Chauffage" in name %}
                            <i class="fas fa-fire"></i>
                        {% elif "Audio" in name %}
                            <i class="fas fa-volume-up"></i>
                        {% else %}
                            <i class="fas fa-toggle-on"></i>
                        {% endif %}
                    </div>
                    <div class="relay-info">
                        <h3>{{ name }}</h3>
                        <div class="pin-info">GPIO {{ pin }}</div>
                    </div>
                </div>
                
                <div class="button-group">
                    <form action="{{ url_for('control_relay', pin=pin, action='on') }}" method="post" style="flex: 1;">
                        <button class="control-button on-button" type="submit">
                            <i class="fas fa-power-off"></i>
                            Allumer
                        </button>
                    </form>
                    <form action="{{ url_for('control_relay', pin=pin, action='off') }}" method="post" style="flex: 1;">
                        <button class="control-button off-button" type="submit">
                            <i class="fas fa-stop"></i>
                            Éteindre
                        </button>
                    </form>
                </div>
            </div>
            {% endfor %}
        </div>
        
        <div class="footer">
            <i class="fas fa-shield-alt"></i> Raspberry Pi GPIO Controller v2.0
        </div>
    </div>

    <script>
        // Ajouter des effets visuels lors du clic
        document.querySelectorAll('.control-button').forEach(button => {
            button.addEventListener('click', function(e) {
                // Effet de ripple
                const ripple = document.createElement('span');
                const rect = button.getBoundingClientRect();
                const size = Math.max(rect.width, rect.height);
                const x = e.clientX - rect.left - size / 2;
                const y = e.clientY - rect.top - size / 2;
                
                ripple.style.cssText = `
                    position: absolute;
                    width: ${size}px;
                    height: ${size}px;
                    left: ${x}px;
                    top: ${y}px;
                    background: rgba(255, 255, 255, 0.6);
                    border-radius: 50%;
                    transform: scale(0);
                    animation: ripple 0.6s linear;
                    pointer-events: none;
                `;
                
                button.appendChild(ripple);
                
                setTimeout(() => {
                    ripple.remove();
                }, 600);
            });
        });
        
        // CSS pour l'animation ripple
        const style = document.createElement('style');
        style.textContent = `
            @keyframes ripple {
                to {
                    transform: scale(2);
                    opacity: 0;
                }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    # Passe le dictionnaire des relais au template
    return render_template_string(HTML_TEMPLATE, relays=RELAY_PINS)

@app.route('/relay/<int:pin>/<action>', methods=['POST'])
def control_relay(pin, action):
    # Vérifie si la broche demandée est bien l'une de nos broches de relais
    if pin in RELAY_PINS.values():
        if action == 'on':
            # GPIO.LOW allume le relais
            GPIO.output(pin, GPIO.LOW)
            print(f"Relais GPIO {pin} allumé")
        elif action == 'off':
            # GPIO.HIGH éteint le relais
            GPIO.output(pin, GPIO.HIGH)
            print(f"Relais GPIO {pin} éteint")
    
    # Redirige vers la page d'accueil
    return redirect(url_for('index'))

if __name__ == '__main__':
    try:
        # Lance l'application Flask, accessible sur le réseau local
        print("🚀 Démarrage du serveur de contrôle des relais...")
        print("📱 Interface accessible sur http://[IP_RASPBERRY]:5000")
        app.run(host='0.0.0.0', port=5000, debug=True)
    except KeyboardInterrupt:
        print("\n⏹️  Arrêt du serveur...")
    finally:
        # Nettoie les GPIO à la fermeture de l'application
        print("🧹 Nettoyage des GPIO...")
        GPIO.cleanup()
        print("✅ Nettoyage terminé!")
